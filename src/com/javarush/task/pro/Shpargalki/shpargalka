

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

         Возвращает значение одномерных массивоа в индексе

         Метод Arrays.toString()

        int[] array = {1, 2, 3};
        String str = Arrays.toString(array);          Переменная str будет содержать строковое значение:
                                                      "[1, 2, 3]"
        int[] array = {};
        String str = Arrays.toString(array);          Переменная str будет содержать строковое значение:
                                                      "[]"
        String[] array = {"Привет", "Как", "Дела"};
        String str = Arrays.toString(array);          Переменная str будет содержать строковое значение:
                                                      "[Привет, Как, Дела]"

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

         Возвращает значение многомерных массивоа в индексе

         Метод Arrays.deepToString()

        Integer[] array = {1, 2, 3};
        String str = Arrays.deepToString(array);              Переменная str будет содержать строковое значение:
                                                              "[1, 2, 3]"
        int[][] array = { {1, 1}, {2, 2}, {3, 3} };
        String str = Arrays.deepToString(array);              Переменная str будет содержать строковое значение:
                                                              "[[1, 1], [2, 2], [3, 3]]"
        int[][][] array = { {{1, 2, 3}, {1}}, {{}} };
        String str = Arrays.deepToString(array);              Переменная str будет содержать строковое значение:
                                                              "[[[1, 2, 3], [1]], [[]]]"

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Сравнения одномерных массивов значение и длину

        Метод Arrays.equals()

        int[] x1 = {1, 2, 3};                 Метод equals у массивов банально сравнивает ссылки двух массивов.
        int[] x2 = {1, 2, 3};
        x1.equals(x2);                        false ссылки не ровны

        int[] x1 = {1, 2, 3};
        int[] x2 = {1, 2, 3};
        Arrays.equals(x1, x2);                true (содержимое массивов равно)



        int[] x1 = {1, 2, 3};
        int[] x2 = {1, 2, 3, 4};
        Arrays.equals(x1, x2);                false (содержимое массивов отличается)

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Сравнения двумерных массивов значение и длину

        Метод Arrays.deepEquals()

        int[][] x1 = {{1, 2, 3}, {4, 5, 6}};           Метод equals у массивов банально сравнивает ссылки двух массивов.
        int[][] x2 = {{1, 2, 3}, {4, 5, 6}};           false (ссылки не равны)
        x1.equals(x2);


        int[][] x1 = {{1, 2, 3}, {4, 5, 6}};         Метод Arrays.equals сравнит x1 и x2 как одномерные массивы, которые
        int[][] x2 = {{1, 2, 3}, {4, 5, 6}};         хранят ссылки. Ссылки в них хранятся разные.
        Arrays.equals(x1, x2);                       false (содержимое массивов неравно)


        int[][] x1 = {{1, 2, 3}, {4, 5, 6}};
        int[][] x2 = {{1, 2, 3}, {4, 5, 6}};         true (содержимое массивов равно)
        Arrays.deepEquals(x1, x2);

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Заполнение массива одинаковыми значениями.

        Метод Arrays.fill()

        int[] x = new int[100];                                  Меняет значение 100 на 999
        Arrays.fill(x, 999);

        Заполнение часть массива одинаковыми значениями.

        int[] x = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};               Заполняем ячейки x[3], x[4], x[5], x[6] значениями 999
        Arrays.fill(x, 3, 7, 999);                               Нумерация ячеек массива с нуля!


        String str = Arrays.toString(x);                         Переменная str содержит значение:
                                                                 "[1, 2, 3, 999, 999, 999, 999, 8, 9, 10]"

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Копирование одного массива первые значение в другую

        Метод Arrays.copyOf()

        int[] x = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

        int[] x2 = Arrays.copyOf(x, 5);                          Переменная str2 содержит значение:
        String str2 = Arrays.toString(x2);                       "[1, 2, 3, 4, 5]" часть массива збрасываеться

        int[] x3 = Arrays.copyOf(x, 15);                         Переменная str3 содержит значение:
        String str3 = Arrays.toString(x3);                       "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0]"
                                                                 Оставщаяся часть заполняеться нулями

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Копирование одного массива последеые значение в другую

        Метод Arrays.copyOfRange()

        int[] x = {11, 12, 13, 14, 15, 16, 17, 18, 19, 20};

        int[] x2 = Arrays.copyOfRange(x, 5, 10);                 Переменная str2 содержит значение:
        String str2 = Arrays.toString(x2);                       "[16, 17, 18, 19, 20]"

        int[] x3 = Arrays.copyOfRange(x, 5, 15);                 Переменная str3 содержит значение:
        String str3 = Arrays.toString(x3);                       "[16, 17, 18, 19, 20, 0, 0, 0, 0, 0]"
                                                                 Оставщаяся часть заполняеться нулями

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Сартировка массивов

        Метод Arrays.sort()                                      Этот метод сортирует переданный массив по возрастанию.

        int[] x = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};

        Arrays.sort(x);                                          Переменная str содержит значение:

        String str = Arrays.toString(x);                         "[-20, -20, -20, -2, 0, 3, 8, 11, 99, 999]"

                                       ///////////////////////////////

        Сартировка часть массива:

        int[] x = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};

        Arrays.sort(x, 4, 8);                                  Переменная str содержит значение:
        String str = Arrays.toString(x);                       "[11, -2, 3, 0, -20, -20, 8, 999, 99, -20]"

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Бинарный поиск

        Предварительно массив сортируется
        Затем средний элемент массива сравнивается с искомым (с тем, который мы ищем).
        Если искомый больше среднего, поиск продолжается в правой половине массива.
        Если искомый элемент меньше среднего, поиск продолжается в левой половине массива:

        Метод Arrays.binarySearch()

        int[] x = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};             x содержит:
        Arrays.sort(x);                                                  {-20, -20, -20, -2, 0, 3, 8, 11, 99, 999}

        int index1 = Arrays.binarySearch(x, 0);                          4
        int index2 = Arrays.binarySearch(x, -20);                        1 (также подходили индексы 0 и 2)
        int index3 = Arrays.binarySearch(x, 99);                         8
        int index4 = Arrays.binarySearch(x, 5);                          -7

        Если искомых элементов в массиве несколько, просто вернется номер одного из них (нет гарантий, что это будет,
        допустим, самый первый или наоборот — самый последний из одинаковых элементов).
        Если элемент в массиве не найден, индекс будет отрицательным.

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////